{"version":3,"sources":["features/tasks/tasksSlice.js","features/tasks/Form/styled.js","features/tasks/Form/index.js","features/tasks/TaskList/styled.js","features/tasks/TaskList/index.js","features/tasks/Buttons/styled.js","features/tasks/Buttons/index.js","common/Header/index.js","features/tasks/TasksSection/styled.js","features/tasks/TasksSection/index.js","features/tasks/TasksContainer/styled.js","features/tasks/TasksContainer/index.js","features/tasks/TasksHeader/index.js","common/Container/styled.js","common/Container/index.js","GlobalStyles.js","features/tasks/Tasks.js","App.js","serviceWorker.js","store.js","index.js"],"names":["tasksSlice","createSlice","name","initialState","tasks","hideDone","reducers","addTask","payload","push","toggleHideDone","state","action","toggleTaskDone","index","findIndex","id","done","removeTask","splice","setAllDone","forEach","task","actions","selectTasks","FormContainer","styled","form","FormHeader","h2","FormMainContent","div","FormInput","input","FormSubmitButton","button","Form","useState","newTaskContent","setNewTaskContent","inputRef","useRef","dispatch","useDispatch","onSubmit","event","preventDefault","trimmedNewTaskContent","trim","content","nanoid","current","focus","ref","value","onChange","target","autoFocus","placeholder","List","ul","Item","li","hidden","css","Content","span","DoneButton","RemoveButton","TaskList","useSelector","map","key","onClick","ButtonContainer","Button","Buttons","length","disabled","every","Header","title","StyledTasksSection","TasksSection","children","StyledTasksContainer","TasksContainer","TasksHeader","Main","Container","GlobalStyles","createGlobalStyle","Tasks","Boolean","window","location","hostname","match","configureStore","reducer","tasksReducer","ReactDOM","render","StrictMode","store","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ab061843.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst tasksSlice = createSlice({\r\n  name: \"tasks\",\r\n  initialState: {\r\n    tasks: [],\r\n    hideDone: false,\r\n  },\r\n  reducers: {\r\n    addTask: ({ tasks }, { payload }) => {\r\n      tasks.push(payload);\r\n    },\r\n    toggleHideDone: (state, action) => {\r\n      state.hideDone = !state.hideDone;\r\n    },\r\n    toggleTaskDone: ({ tasks }, { payload }) => {\r\n      const index = tasks.findIndex(({ id }) => id === payload);\r\n      tasks[index].done = !tasks[index].done;\r\n    },\r\n    removeTask: ({ tasks }, { payload }) => {\r\n      const index = tasks.findIndex(({ id }) => id === payload);\r\n      tasks.splice(index, 1);\r\n    },\r\n    setAllDone: ({ tasks }) => {\r\n      tasks.forEach((task) => {\r\n        task.done = true;\r\n      });\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  addTask,\r\n  toggleHideDone,\r\n  toggleTaskDone,\r\n  removeTask,\r\n  setAllDone,\r\n} = tasksSlice.actions;\r\nexport const selectTasks = (state) => state.tasks;\r\nexport default tasksSlice.reducer;\r\n","import styled from \"styled-components\";\r\n\r\nexport const FormContainer = styled.form`\r\n  background-color: white;\r\n`;\r\n\r\nexport const FormHeader = styled.h2`\r\n  padding: 20px;\r\n  margin: 0;\r\n\r\n  @media (max-width: 767px) {\r\n    font-size: 20px;\r\n  }\r\n`;\r\n\r\nexport const FormMainContent = styled.div`\r\n  padding: 20px;\r\n  border-top: 2px solid #e8e8e8;\r\n  display: flex;\r\n\r\n  @media (max-width: 767px) {\r\n    flex-direction: column;\r\n    flex-basis: 100%;\r\n  }\r\n`;\r\n\r\nexport const FormInput = styled.input`\r\n  padding: 10px;\r\n  width: 100%;\r\n  max-width: 800px;\r\n  margin-right: 20px;\r\n  flex-grow: 1;\r\n  border: 2px solid #e8e8e8;\r\n\r\n  &:placeholder {\r\n    color: hsl(0, 0%, 75%);\r\n  }\r\n\r\n  @media (max-width: 767px) {\r\n    width: 100%;\r\n    max-width: unset;\r\n  }\r\n`;\r\n\r\nexport const FormSubmitButton = styled.button`\r\n  padding: 10px;\r\n  background-color: hsl(180, 100%, 25%);\r\n  color: hsl(179, 58%, 88%);\r\n  font-weight: 300;\r\n  border: none;\r\n  transition: background-color 1s, transform 0.3s;\r\n\r\n  &:hover {\r\n    transform: scale(1.1);\r\n    background-color: hsl(180, 100%, 35%);\r\n  }\r\n\r\n  @media (max-width: 767px) {\r\n    margin-top: 10px;\r\n    width: 100%;\r\n  }\r\n`;\r\n","import { nanoid } from \"@reduxjs/toolkit\";\r\nimport React, { useState, useRef } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addTask } from \"../tasksSlice\";\r\nimport {\r\n  FormContainer,\r\n  FormHeader,\r\n  FormMainContent,\r\n  FormInput,\r\n  FormSubmitButton,\r\n} from \"./styled\";\r\n\r\nconst Form = () => {\r\n  const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n\r\n  const inputRef = useRef(null);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const focusInput = () => {\r\n    inputRef.current.focus();\r\n  };\r\n\r\n  const onFormSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    const trimmedNewTaskContent = newTaskContent.trim();\r\n\r\n    if (!trimmedNewTaskContent) {\r\n      return;\r\n    }\r\n\r\n    dispatch(\r\n      addTask({\r\n        content: trimmedNewTaskContent,\r\n        done: false,\r\n        id: nanoid(),\r\n      })\r\n    );\r\n\r\n    setNewTaskContent(\"\");\r\n\r\n    focusInput();\r\n  };\r\n\r\n  return (\r\n    <FormContainer onSubmit={onFormSubmit}>\r\n      <FormHeader>Dodaj nowe zadanie</FormHeader>\r\n      <FormMainContent>\r\n        <FormInput\r\n          ref={inputRef}\r\n          value={newTaskContent}\r\n          onChange={({ target }) => setNewTaskContent(target.value)}\r\n          autoFocus\r\n          placeholder=\"Co jest do zrobienia?\"\r\n        />\r\n        <FormSubmitButton>Dodaj zadanie</FormSubmitButton>\r\n      </FormMainContent>\r\n    </FormContainer>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import styled, { css } from \"styled-components\";\r\n\r\nexport const List = styled.ul`\r\n  padding: 20px;\r\n  margin-top: 25px;\r\n  list-style-type: none;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n  padding: 10px;\r\n  border-bottom: 2px solid #e8e8e8;\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  ${({ hidden }) =>\r\n    hidden &&\r\n    css`\r\n      display: none;\r\n    `}\r\n`;\r\n\r\nexport const Content = styled.span`\r\n  flex-grow: 1;\r\n  margin: 0 10px;\r\n\r\n  ${({ done }) =>\r\n    done &&\r\n    css`\r\n      text-decoration: line-through;\r\n    `}\r\n`;\r\n\r\nexport const DoneButton = styled.button`\r\n  height: 30px;\r\n  width: 30px;\r\n  background-color: green;\r\n  border: none;\r\n  color: green;\r\n  flex-shrink: 0;\r\n\r\n  ${({ done }) =>\r\n    done &&\r\n    css`\r\n      color: white;\r\n    `}\r\n`;\r\n\r\nexport const RemoveButton = styled.button`\r\n  height: 30px;\r\n  width: 30px;\r\n  background-color: red;\r\n  border: none;\r\n  color: white;\r\n  flex-shrink: 0;\r\n`;\r\n","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectTasks, toggleTaskDone, removeTask } from \"../tasksSlice\";\r\nimport { List, Item, Content, DoneButton, RemoveButton } from \"./styled\";\r\n\r\nconst TaskList = () => {\r\n  const { tasks, hideDone } = useSelector(selectTasks);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <List>\r\n      {tasks.map((task) => (\r\n        <Item key={task.id} hidden={task.done && hideDone}>\r\n          <DoneButton\r\n            onClick={() => dispatch(toggleTaskDone(task.id))}\r\n            done={task.done}\r\n          >\r\n            ✔\r\n          </DoneButton>\r\n          <Content done={task.done}>{task.content}</Content>\r\n          <RemoveButton onClick={() => dispatch(removeTask(task.id))}>\r\n            🗑\r\n          </RemoveButton>\r\n        </Item>\r\n      ))}\r\n    </List>\r\n  );\r\n};\r\n\r\nexport default TaskList;\r\n","import styled from \"styled-components\";\r\n\r\nexport const ButtonContainer = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr auto;\r\n\r\n  @media (max-width: 767px) {\r\n    grid-template-columns: 1fr;\r\n  }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  background-color: transparent;\r\n  border: none;\r\n  padding: 20px;\r\n  color: teal;\r\n  transition: color 0.3s;\r\n\r\n  &:hover {\r\n    color: hsl(180, 100%, 35%);\r\n  }\r\n\r\n  &:active {\r\n    color: hsl(180, 100%, 50%);\r\n  }\r\n\r\n  &:disabled {\r\n    color: #ccc;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectTasks, toggleHideDone, setAllDone } from \"../tasksSlice\";\r\nimport { ButtonContainer, Button } from \"./styled\";\r\n\r\nconst Buttons = () => {\r\n  const { tasks, hideDone } = useSelector(selectTasks);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    tasks.length > 0 && (\r\n      <ButtonContainer>\r\n        <Button onClick={() => dispatch(toggleHideDone())}>\r\n          {hideDone ? \"Pokaż ukończone\" : \"Ukryj ukończone\"}\r\n        </Button>\r\n        <Button\r\n          onClick={() => dispatch(setAllDone())}\r\n          disabled={tasks.every(({ done }) => done)}\r\n        >\r\n          Ukończ wszystkie\r\n        </Button>\r\n      </ButtonContainer>\r\n    )\r\n  );\r\n};\r\n\r\nexport default Buttons;\r\n","import React from 'react';\r\n\r\nconst Header = ({title}) => (\r\n    <h1>{title}</h1>\r\n);\r\n\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nexport const StyledTasksSection = styled.div`\r\n  background-color: white;\r\n  margin-top: 10px;\r\n  width: 100%;\r\n`;\r\n","import React from \"react\";\r\nimport { StyledTasksSection } from \"./styled\";\r\n\r\nconst TasksSection = ({ children }) => (\r\n  <StyledTasksSection>{children}</StyledTasksSection>\r\n);\r\n\r\nexport default TasksSection;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledTasksContainer = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr auto;\r\n  border-bottom: 2px solid #e8e8e8;\r\n  padding: 20px;\r\n\r\n  @media (max-width: 767px) {\r\n    grid-template-columns: 1fr;\r\n    padding-bottom: 20px;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { StyledTasksContainer } from \"./styled\";\r\n\r\nconst TasksContainer = ({ children }) => (\r\n  <StyledTasksContainer>\r\n      {children}\r\n  </StyledTasksContainer>\r\n);\r\n\r\nexport default TasksContainer;\r\n","import React from 'react';\r\n\r\nconst TasksHeader = ({title}) => (\r\n    <h2>{title}</h2>\r\n);\r\n\r\nexport default TasksHeader;","import styled from \"styled-components\";\r\n\r\nexport const Main = styled.div`\r\n  margin: 10vh auto;\r\n  width: 100%;\r\n  max-width: 1000px;\r\n\r\n  display: flex;\r\n  flex-flow: column wrap;\r\n`;\r\n","import React from 'react';\r\nimport {Main} from \"./styled\";\r\n\r\nconst Container = ({children}) => (\r\n    <Main>\r\n        {children}\r\n    </Main>\r\n);\r\n\r\nexport default Container;","import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyles = createGlobalStyle`\r\n  html {\r\n    box-sizing: border-box;\r\n  }\r\n\r\n  *,\r\n    ::after,\r\n    ::before {\r\n    box-sizing: inherit;\r\n  }\r\n\r\n  body {\r\n    padding: 20px;\r\n    font-family: \"Montserrat\", sans-serif;\r\n    background-color: #efefef;\r\n    justify-content: center;\r\n  }\r\n`;\r\n","import React from \"react\";\nimport Form from \"./Form\";\nimport TaskList from \"./TaskList\";\nimport Buttons from \"./Buttons\";\nimport Header from \"../../common/Header\";\nimport TasksSection from \"./TasksSection\";\nimport TasksContainer from \"./TasksContainer\";\nimport TasksHeader from \"./TasksHeader\";\nimport Container from \"../../common/Container\";\nimport { GlobalStyles } from \"../../GlobalStyles\";\n\nfunction Tasks() {\n  return (\n    <Container>\n      <GlobalStyles />\n      <Header title=\"Lista zadań\" />\n      <Form />\n      <TasksSection>\n        <TasksContainer>\n          <TasksHeader title=\"Lista zadań\" />\n          <Buttons />\n        </TasksContainer>\n        <TaskList />\n      </TasksSection>\n    </Container>\n  );\n}\n\nexport default Tasks;\n","import React from \"react\";\r\nimport Tasks from \"./features/tasks/Tasks\";\r\n\r\nexport default () => <Tasks />;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport tasksReducer from \"./features/tasks/tasksSlice\";\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    tasks: tasksReducer,\r\n  },\r\n});\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}