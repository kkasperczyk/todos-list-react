{"version":3,"sources":["Form/index.js","Tasks/index.js","Buttons/index.js","Header/index.js","TasksSection/index.js","TasksContainer/index.js","TasksHeader/index.js","Container/index.js","App.js","serviceWorker.js","index.js"],"names":["Form","addNewTask","useState","newTaskContent","setNewTaskContent","className","onSubmit","event","preventDefault","trimmedNewTaskContent","trim","value","onChange","target","autoFocus","placeholder","Tasks","tasks","hideDone","removeTask","toggleTaskDone","map","task","key","id","done","onClick","content","Buttons","toggleHideDone","setAllDone","length","disabled","every","Header","title","TasksSection","children","TasksContainer","TasksHeader","Container","App","setHideDone","JSON","parse","localStorage","getItem","setTasks","useEffect","setItem","stringify","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.869061e5.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Form = ({ addNewTask }) => {\r\n  const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n\r\n  const onFormSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    const trimmedNewTaskContent = newTaskContent.trim();\r\n\r\n    if (!trimmedNewTaskContent) {\r\n      return;\r\n    }\r\n\r\n    addNewTask(trimmedNewTaskContent);\r\n    setNewTaskContent(\"\");\r\n  };\r\n\r\n  return (\r\n    <form className=\"form\" onSubmit={onFormSubmit}>\r\n      <h2 className=\"form__header\">Dodaj nowe zadanie</h2>\r\n      <div className=\"form__main-content\">\r\n        <input\r\n          value={newTaskContent}\r\n          onChange={({ target }) => setNewTaskContent(target.value)}\r\n          className=\"form__input\"\r\n          autoFocus\r\n          placeholder=\"Co jest do zrobienia?\"\r\n        />\r\n        <button className=\"form__button\">Dodaj zadanie</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Tasks = ({ tasks, hideDone, removeTask, toggleTaskDone }) => (\r\n  <ul className=\"tasks__list\">\r\n    {tasks.map((task) => (\r\n      <li\r\n        key={task.id}\r\n        className={`js-tasks__list-item ${\r\n          task.done && hideDone ? \"tasks__list-item--hidden\" : \"\"\r\n        }`}\r\n      >\r\n        <button\r\n          onClick={() => toggleTaskDone(task.id)}\r\n          className={`js-done ${task.done ? \"js-done--ticked\" : \"\"}`}\r\n        >\r\n          âœ”\r\n        </button>\r\n        <span\r\n          className={`js-taskContent ${\r\n            task.done ? \"js-taskContent--done\" : \"\"\r\n          }`}\r\n        >\r\n          {task.content}\r\n        </span>\r\n        <button onClick={() => removeTask(task.id)} className=\"js-remove\">\r\n          ðŸ—‘\r\n        </button>\r\n      </li>\r\n    ))}\r\n  </ul>\r\n);\r\n\r\nexport default Tasks;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Buttons = ({ tasks, hideDone, toggleHideDone, setAllDone }) =>\r\n  tasks.length > 0 && (\r\n    <div className=\"tasks__buttonContainer\">\r\n      <button\r\n        onClick={toggleHideDone}\r\n        className=\"tasks__button js-hideDoneButton\"\r\n      >\r\n        {hideDone ? \"PokaÅ¼ ukoÅ„czone\" : \"Ukryj ukoÅ„czone\"}\r\n      </button>\r\n      <button\r\n        onClick={setAllDone}\r\n        className=\"tasks__button js-toggleAllDoneButton\"\r\n        disabled={tasks.every(({ done }) => done)}\r\n      >\r\n        UkoÅ„cz wszystkie\r\n      </button>\r\n    </div>\r\n  );\r\n\r\nexport default Buttons;\r\n","import React from 'react';\r\n\r\nconst Header = ({title}) => (\r\n    <h1 className=\"header\">{title}</h1>\r\n);\r\n\r\nexport default Header;","import React from 'react';\r\nimport './style.css';\r\n\r\nconst TasksSection = ({children}) => (\r\n    <div className=\"tasks\">\r\n        {children}\r\n    </div>\r\n);\r\n\r\nexport default TasksSection;","import React from 'react';\r\nimport './style.css';\r\n\r\nconst TasksContainer = ({children}) => (\r\n    <div className=\"tasks__container\">\r\n        {children}\r\n    </div>\r\n);\r\n\r\nexport default TasksContainer;","import React from 'react';\r\n\r\nconst TasksHeader = ({title}) => (\r\n    <h2 className=\"tasks__header\">{title}</h2>\r\n);\r\n\r\nexport default TasksHeader;","import React from 'react';\r\nimport './style.css';\r\n\r\nconst Container = ({children}) => (\r\n    <main className=\"main\">\r\n        {children}\r\n    </main>\r\n);\r\n\r\nexport default Container;","import React, { useState, useEffect } from \"react\";\nimport Form from \"./Form\";\nimport Tasks from \"./Tasks\";\nimport Buttons from \"./Buttons\";\nimport Header from \"./Header\";\nimport TasksSection from \"./TasksSection\";\nimport TasksContainer from \"./TasksContainer\";\nimport TasksHeader from \"./TasksHeader\";\nimport Container from \"./Container\";\n\nfunction App() {\n  const [hideDone, setHideDone] = useState(false);\n  const [tasks, setTasks] = useState(\n    JSON.parse(localStorage.getItem(\"tasks\")) || []\n  );\n\n  useEffect(() => {\n    localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n  }, [tasks]);\n\n  const toggleHideDone = () => {\n    setHideDone((hideDone) => !hideDone);\n  };\n\n  const removeTask = (id) => {\n    setTasks((tasks) => tasks.filter((task) => task.id !== id));\n  };\n\n  const toggleTaskDone = (id) => {\n    setTasks((tasks) =>\n      tasks.map((task) => {\n        if (task.id === id) {\n          return { ...task, done: !task.done };\n        }\n\n        return task;\n      })\n    );\n  };\n\n  const setAllDone = () => {\n    setTasks((tasks) =>\n      tasks.map((task) => ({\n        ...task,\n        done: true,\n      }))\n    );\n  };\n\n  const addNewTask = (content) => {\n    setTasks((tasks) => [\n      ...tasks,\n      {\n        content,\n        done: false,\n        id: tasks.length ? tasks[tasks.length - 1].id + 1 : 1,\n      },\n    ]);\n  };\n\n  return (\n    <Container>\n      <Header title=\"Lista zadaÅ„\" />\n      <Form addNewTask={addNewTask} />\n      <TasksSection>\n        <TasksContainer>\n          <TasksHeader title=\"Lista zadaÅ„\" />\n          <Buttons\n            tasks={tasks}\n            hideDone={hideDone}\n            toggleHideDone={toggleHideDone}\n            setAllDone={setAllDone}\n          />\n        </TasksContainer>\n        <Tasks\n          tasks={tasks}\n          hideDone={hideDone}\n          removeTask={removeTask}\n          toggleTaskDone={toggleTaskDone}\n        />\n      </TasksSection>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}